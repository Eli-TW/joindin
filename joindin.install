<?php
/**
 * @file
 */
// TODO check the database types against what we can be sent by joind.in
/**
 * Defines the database schema for joindin. Deprecated as we're moving to
 * nodes for built-in comment support
 * @return mixed database schema for the joindin module
 */
/*
function joindin_schema() {
  $schema['joindin_event'] = array(
    'description' => 'The store for our events',
    'fields' => array(
      'eid' => array(
        'description' => 'Primary key for our table of events in Drupal',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name of the event',
        'type' => 'int',
      ),
      'start_date' => array(
        'description' => 'Date on which the event starts',
        'type' => 'int',
      ),
      'end_date' => array(
        'description' => 'Date on which the event ends',
        'type' => 'int',
      ),
      'description' => array(
        'description' => 'Description of the event',
        'type' => 'int',
      ),
      'href' => array(
        'description' => 'Event link',
        'type' => 'int',
      ),
      'icon' => array(
        'description' => 'Filename of event icon in joind.in inc/img/event_icons/ folder',
        'type' => 'int',
      ),
      'latitude' => array(
        'description' => 'Latitude of the event\'s location',
        'type' => 'int',
      ),
      'longitude' => array(
        'description' => 'Longitude of the event\'s location',
        'type' => 'int',
      ),
      'tz_continent' => array(
        'description' => 'Timezone continent of the event',
        'type' => 'int',
      ),
      'tz_place' => array(
        'description' => 'Timezone place of the event',
        'type' => 'int',
      ),
      'location' => array(
        'description' => 'Location of the event',
        'type' => 'int',
      ),
      'hashtag' => array(
        'description' => 'Twitter hashtag of the event',
        'type' => 'int',
      ),
      'attendee_count' => array(
        'description' => 'Attendee count',
        'type' => 'int',
      ),
      'attending' => array(
        'description' => 'This doesnt\'t appear to be populated',
        'type' => 'int',
      ),
      'comments_enabled' => array(
        'description' => 'If comments are enabled for this event',
        'type' => 'int',
      ),
      'event_comments_count' => array(
        'description' => 'Count of comments made about this event',
        'type' => 'int',
      ),
      'cfp_start_date' => array(
        'description' => 'Date call for papers opens',
        'type' => 'int',
      ),
      'cfp_end_date' => array(
        'description' => 'Date call for papers closes',
        'type' => 'int',
      ),
      'cfp_url' => array(
        'description' => 'URL from which call for papers have been submitted',
        'type' => 'int',
      ),
      // TODO 'tags' field will be implemented through taxonomy
      // TODO 'hosts' needs mapping to users?
      'uri' => array(
        'description' => 'URI of this event in the API',
        'type' => 'int',
      ),
      'verbose_uri' => array(
        'description' => 'URI of this event in the API with verbose parameter set',
        'type' => 'int',
      ),
      'comments_uri' => array(
        'description' => 'URI to fetch comments for this event in the API',
        'type' => 'int',
      ),
      'talks_uri' => array(
        'description' => 'URI to fetch talks for this event in the API',
        'type' => 'int',
      ),
      'website_uri' => array(
        'description' => 'URI of this event\'s location on joind.in',
        'type' => 'int',
      ),
      'humane_website_uri' => array(
        'description' => 'Human readable URI of this event\'s location on joind.in',
        'type' => 'int',
      ),
      'all_talk_comments_uri' => array(
        'description' => 'URI to fetch all comments across this event in the API',
        'type' => 'int',
      ),
    ),
    'primary key' => array('eid'),
  );

  return $schema;
}
*/
/**
 * Implements hook_install.
 * Sets default values for joindin variables and defines custom node types
 */
function joindin_install() {
  // Set default variables
  variable_set('joindin_base_url', 'http://api.joind.in');
  variable_set('joindin_api_version', 'v2.1');

  // todo: create vocabulary for joindin tags

  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  // Define our node types; we require node types for
  //  Events
  //  Talks
  //  ...

  // Define Event node type
  $event_info = array(
    'type' => 'joindin_event',
    'name' => $t('Joind.in event'),
    // 'base' tells Drupal the base string for hook functions.
    'base' => 'joindin',
    'description' => $t('This node type represents an event in joind.in.'),
    'title_label' => $t('Event'),
  );

  // Convert to object and set defaults we haven't overridden in the $event_info
  $event_type = node_type_set_defaults($event_info);

  // Add a body field and set the body label immediately.
  node_add_body_field($event_type, $t('Description'));

  // Save the content type
  node_type_save($event_type);
}

/**
 * Implements hook_uninstall.
 * Remove all variables and custom node types defined by this module
 */
function joindin_uninstall() {
  // Remove all variables
  variable_del('joindin_base_url');
  variable_del('joindin_api_version');

  // Remove all node types
  node_type_delete('joindin_event');
}
