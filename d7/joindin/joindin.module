<?php
// TODO: check max size of this ID. This is currently a guess. (is it even needed?)
define('JOINDIN_ID_LENGTH', 12);

// TODO: this isn't always required but is here to ease initial testing
require_once('./' .drupal_get_path('module', 'joindin') . '/includes/joindin.api.inc');

/**
 * Implements hook_block_info
 * Defines blocks to hold the joind.in
 */
function joindin_block_info() {
  /*
   * TODO: implement blocks for the widgets
   * These may need to be views that take arguments? Look into multiple block
   * modules - is boxes still used on D7? Are there better alternatives?
   */
  $blocks = array();

  return $blocks;
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the fields, being joindin id's for events and talks
 */ /*
function joindin_field_info() {
  return array(
    'joindin_event_id' => array(
      'label' => t('Joind.in event ID'),
      'description' => t('ID of a joind.in event as assigned on the joind.in website.'),
      'default_widget' => 'field_example_3text', // do we need to define our own widget here?
      'default_formatter' => 'field_example_simple_text', // or should an existing one be ok?
    ),
    'joindin_talk_id' => array(
      'label' => t('Joind.in talk ID'),
      'description' => t('ID of a joind.in talk as assigned on the joind.in website.'),
      'default_widget' => 'field_example_3text', // do we need to define our own widget here?
      'default_formatter' => 'field_example_simple_text', // or should an existing one be ok?
    ),
  );
}*/

/**
 * Implements joindin_field_validate().
 *
 * We could use this to check talks/events are actually present on joindin when
 * saved. For now, doing nothing will allow everything to pass through
 *
 * @param $entity_type
 * @param $entity
 * @param $field
 * @param $instance
 * @param $langcode
 * @param $items
 * @param $errors
 *//*
function joindin_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
}*/


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_empty() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
/*
function joindin_field_is_empty($item, $field) {
  // TODO debug this to see what is passed through
  return empty($item['rgb']);
}
*/
/**
 * Implements hook_field_widget_info().
 *
 * A single simple text widget is provided for both fields
 *//*
function joindin_field_widget_info() {
  return array(
    'joindin_text' => array(
      'label' => t('Joind.in ID'),
      'field types' => array(
        'joindin_event_id',
        'joindin_talk_id',
      ),
    ),
  );
}*/

/**
 * Implements hook_field_widget_form().
 *//*
function joindin_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'joindin_text':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
        '#size' => JOINDIN_ID_LENGTH,
        '#maxlength' => JOINDIN_ID_LENGTH,
      );
      break;
  }

  $element['rgb'] = $widget;
  return $element;
}*/

/**
 * Validation for the widget?
 */
/*
function joindin_text_validate($element, &$form_state) {
  $delta = $element['#delta']; // TODO: Isn't there a better way to find out which element?
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['rgb'])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta]['rgb'];
    foreach (array('r', 'g', 'b') as $colorfield) {
      $colorfield_value = hexdec($values[$colorfield]);
      // If they left any empty, we'll set the value empty and quit.
      if (strlen($values[$colorfield]) == 0) {
        form_set_value($element, '', $form_state);
        return;
      }
      // If they gave us anything that's not hex, reject it.
      if ( (strlen($values[$colorfield]) != 2) || $colorfield_value < 0 || $colorfield_value > 255) {
        form_error($element[$colorfield], t("Saturation value must be a 2-digit hexadecimal value between 00 and ff."));
      }
    }

    $value = sprintf('#%02s%02s%02s', $values['r'], $values['g'], $values['b']);
    form_set_value($element, $value, $form_state);
  }
}
*/

/**
 * Implements hook_entity_info.
 * @return array of entities defined by this module, being events and talks
 */
/*
function joindin_entity_info() {
  return array(
    'joindin_event' => array(
      'label' => t('Joind.in Event'),
      'base table' => 'joindin_event',
      'entity keys' => array(
        'id' => 'eid',
      ),
    ),
  );
}
*/
